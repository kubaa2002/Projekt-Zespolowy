/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as SettingsImport } from './routes/settings'
import { Route as ResetconfirmImport } from './routes/resetconfirm'
import { Route as ResetImport } from './routes/reset'
import { Route as PostImport } from './routes/post'
import { Route as LoginImport } from './routes/login'
import { Route as HeroImport } from './routes/hero'
import { Route as CreateImport } from './routes/create'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as CommunitiesIndexImport } from './routes/communities/index'
import { Route as UsersFollowingImport } from './routes/users/following'
import { Route as UsersUserIdImport } from './routes/users/$userId'
import { Route as CommunitiesNewImport } from './routes/communities/new'
import { Route as CommunitiesCommunityIdImport } from './routes/communities/$communityId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ResetconfirmRoute = ResetconfirmImport.update({
  id: '/resetconfirm',
  path: '/resetconfirm',
  getParentRoute: () => rootRoute,
} as any)

const ResetRoute = ResetImport.update({
  id: '/reset',
  path: '/reset',
  getParentRoute: () => rootRoute,
} as any)

const PostRoute = PostImport.update({
  id: '/post',
  path: '/post',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HeroRoute = HeroImport.update({
  id: '/hero',
  path: '/hero',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const CommunitiesIndexRoute = CommunitiesIndexImport.update({
  id: '/communities/',
  path: '/communities/',
  getParentRoute: () => rootRoute,
} as any)

const UsersFollowingRoute = UsersFollowingImport.update({
  id: '/users/following',
  path: '/users/following',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

const CommunitiesNewRoute = CommunitiesNewImport.update({
  id: '/communities/new',
  path: '/communities/new',
  getParentRoute: () => rootRoute,
} as any)

const CommunitiesCommunityIdRoute = CommunitiesCommunityIdImport.update({
  id: '/communities/$communityId',
  path: '/communities/$communityId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/hero': {
      id: '/hero'
      path: '/hero'
      fullPath: '/hero'
      preLoaderRoute: typeof HeroImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/post': {
      id: '/post'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostImport
      parentRoute: typeof rootRoute
    }
    '/reset': {
      id: '/reset'
      path: '/reset'
      fullPath: '/reset'
      preLoaderRoute: typeof ResetImport
      parentRoute: typeof rootRoute
    }
    '/resetconfirm': {
      id: '/resetconfirm'
      path: '/resetconfirm'
      fullPath: '/resetconfirm'
      preLoaderRoute: typeof ResetconfirmImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/communities/$communityId': {
      id: '/communities/$communityId'
      path: '/communities/$communityId'
      fullPath: '/communities/$communityId'
      preLoaderRoute: typeof CommunitiesCommunityIdImport
      parentRoute: typeof rootRoute
    }
    '/communities/new': {
      id: '/communities/new'
      path: '/communities/new'
      fullPath: '/communities/new'
      preLoaderRoute: typeof CommunitiesNewImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof rootRoute
    }
    '/users/following': {
      id: '/users/following'
      path: '/users/following'
      fullPath: '/users/following'
      preLoaderRoute: typeof UsersFollowingImport
      parentRoute: typeof rootRoute
    }
    '/communities/': {
      id: '/communities/'
      path: '/communities'
      fullPath: '/communities'
      preLoaderRoute: typeof CommunitiesIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/hero': typeof HeroRoute
  '/login': typeof LoginRoute
  '/post': typeof PostRoute
  '/reset': typeof ResetRoute
  '/resetconfirm': typeof ResetconfirmRoute
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/communities/$communityId': typeof CommunitiesCommunityIdRoute
  '/communities/new': typeof CommunitiesNewRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/following': typeof UsersFollowingRoute
  '/communities': typeof CommunitiesIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/hero': typeof HeroRoute
  '/login': typeof LoginRoute
  '/post': typeof PostRoute
  '/reset': typeof ResetRoute
  '/resetconfirm': typeof ResetconfirmRoute
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/communities/$communityId': typeof CommunitiesCommunityIdRoute
  '/communities/new': typeof CommunitiesNewRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/following': typeof UsersFollowingRoute
  '/communities': typeof CommunitiesIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/hero': typeof HeroRoute
  '/login': typeof LoginRoute
  '/post': typeof PostRoute
  '/reset': typeof ResetRoute
  '/resetconfirm': typeof ResetconfirmRoute
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/communities/$communityId': typeof CommunitiesCommunityIdRoute
  '/communities/new': typeof CommunitiesNewRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/following': typeof UsersFollowingRoute
  '/communities/': typeof CommunitiesIndexRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/hero'
    | '/login'
    | '/post'
    | '/reset'
    | '/resetconfirm'
    | '/settings'
    | '/signup'
    | '/communities/$communityId'
    | '/communities/new'
    | '/users/$userId'
    | '/users/following'
    | '/communities'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create'
    | '/hero'
    | '/login'
    | '/post'
    | '/reset'
    | '/resetconfirm'
    | '/settings'
    | '/signup'
    | '/communities/$communityId'
    | '/communities/new'
    | '/users/$userId'
    | '/users/following'
    | '/communities'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/hero'
    | '/login'
    | '/post'
    | '/reset'
    | '/resetconfirm'
    | '/settings'
    | '/signup'
    | '/communities/$communityId'
    | '/communities/new'
    | '/users/$userId'
    | '/users/following'
    | '/communities/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  HeroRoute: typeof HeroRoute
  LoginRoute: typeof LoginRoute
  PostRoute: typeof PostRoute
  ResetRoute: typeof ResetRoute
  ResetconfirmRoute: typeof ResetconfirmRoute
  SettingsRoute: typeof SettingsRoute
  SignupRoute: typeof SignupRoute
  CommunitiesCommunityIdRoute: typeof CommunitiesCommunityIdRoute
  CommunitiesNewRoute: typeof CommunitiesNewRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersFollowingRoute: typeof UsersFollowingRoute
  CommunitiesIndexRoute: typeof CommunitiesIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  HeroRoute: HeroRoute,
  LoginRoute: LoginRoute,
  PostRoute: PostRoute,
  ResetRoute: ResetRoute,
  ResetconfirmRoute: ResetconfirmRoute,
  SettingsRoute: SettingsRoute,
  SignupRoute: SignupRoute,
  CommunitiesCommunityIdRoute: CommunitiesCommunityIdRoute,
  CommunitiesNewRoute: CommunitiesNewRoute,
  UsersUserIdRoute: UsersUserIdRoute,
  UsersFollowingRoute: UsersFollowingRoute,
  CommunitiesIndexRoute: CommunitiesIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/create",
        "/hero",
        "/login",
        "/post",
        "/reset",
        "/resetconfirm",
        "/settings",
        "/signup",
        "/communities/$communityId",
        "/communities/new",
        "/users/$userId",
        "/users/following",
        "/communities/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/create": {
      "filePath": "create.jsx"
    },
    "/hero": {
      "filePath": "hero.jsx"
    },
    "/login": {
      "filePath": "login.jsx"
    },
    "/post": {
      "filePath": "post.jsx"
    },
    "/reset": {
      "filePath": "reset.jsx"
    },
    "/resetconfirm": {
      "filePath": "resetconfirm.jsx"
    },
    "/settings": {
      "filePath": "settings.jsx"
    },
    "/signup": {
      "filePath": "signup.jsx"
    },
    "/communities/$communityId": {
      "filePath": "communities/$communityId.jsx"
    },
    "/communities/new": {
      "filePath": "communities/new.jsx"
    },
    "/users/$userId": {
      "filePath": "users/$userId.jsx"
    },
    "/users/following": {
      "filePath": "users/following.jsx"
    },
    "/communities/": {
      "filePath": "communities/index.jsx"
    },
    "/users/": {
      "filePath": "users/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
